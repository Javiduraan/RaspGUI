
import java.awt.Color;
import java.awt.event.KeyEvent;
import javax.swing.JOptionPane;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.io.*;
import javax.crypto.*;
import javax.crypto.spec.DESKeySpec;
import java.security.*;
import java.security.spec.InvalidKeySpecException;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.spec.SecretKeySpec;
import javax.swing.JOptionPane;
import sun.misc.BASE64Encoder;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author MSI
 */
public class LogIn extends javax.swing.JFrame {
 Conexion cone = new Conexion();
 LocalDate date = LocalDate.now();
 LocalTime time = LocalTime.now();


    public LogIn() {
        initComponents();
    }
   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtUsuario = new javax.swing.JTextField();
        txtPass = new javax.swing.JPasswordField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnAceptar = new javax.swing.JButton();
        lblEdoServer = new javax.swing.JLabel();
        btnEdoServer = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUsuarioActionPerformed(evt);
            }
        });

        jLabel1.setText("Usuario");

        jLabel2.setText("Contraseña");

        btnAceptar.setText("Aceptar");
        btnAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAceptarActionPerformed(evt);
            }
        });
        btnAceptar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnAceptarKeyPressed(evt);
            }
        });

        btnEdoServer.setText("Estado del servidor");
        btnEdoServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEdoServerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(156, 156, 156)
                .addComponent(btnAceptar)
                .addGap(0, 173, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtUsuario, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE)
                            .addComponent(txtPass)))
                    .addComponent(btnEdoServer))
                .addGap(35, 35, 35)
                .addComponent(lblEdoServer)
                .addGap(66, 66, 66))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(77, 77, 77)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(37, 37, 37)
                .addComponent(btnAceptar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 68, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblEdoServer)
                        .addGap(34, 34, 34))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnEdoServer)
                        .addGap(21, 21, 21))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUsuarioActionPerformed
       
    }//GEN-LAST:event_txtUsuarioActionPerformed

    private void btnAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAceptarActionPerformed
        
        String user = txtUsuario.getText();
        String pass = txtPass.getText();
        AdminVen ventanaAdmin = new AdminVen();
        SecFrameLamp ventanaLamp = new SecFrameLamp();
        String userId =  Conexion.getUserId(user); // El metodo devuelve el id de usuario en String y lo pone en la variable userId
        String accessLevel = Conexion.getAccesslevel(user);
      if(userId.contentEquals("")){ //Si el Id de usuario no devuelve ningun valor se le asigna un 0 a userId, que en la base de datos es un usuario NULL.
          userId = "0";
      } 
 
    if(Conexion.cone == null){ //Si no existe la conexion llama al metodo crear que hace la conexion.
            try {
                Conexion.crear();
            } catch (SQLException ex) {
                Logger.getLogger(LogIn.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(LogIn.class.getName()).log(Level.SEVERE, null, ex);
            }
    }
    
    if(Conexion.validarUser(user, pass)== 1){   //El metodo validar devuelve un 1 si el usuario existe en la base de datos Si no, pues no existe.
            switch (accessLevel) {
                case "0":
                    {
                        //Si el nivel de usuario es 0 el usuario es un Administrador o un desarrollador.
                        String detail = "Acceso administrativo/Dev"; //El detalle que ira en el campo detail de la tabla bitacora OkAccessLog
                        Conexion.okAccessLog(userId, date.toString(), time.toString(), detail); //Llama al metodo okAccessLog que inserta en la bitacora los detalles de el usuario. 
                        ventanaAdmin.setVisible(true); //Muestra la ventana de administrador. 
                        this.dispose(); //Cierra esta ventana
                        break;
                    }
                case "1":
                    {
                        // Si el nivel de usuario es 1 significa que es un usuario de control de horarios.
                        String detail = "Acceso de control de horas autorizado";
                        Conexion.okAccessLog(userId, date.toString(), time.toString(), detail);
                        ventanaAdmin.setVisible(true);
                        this.dispose();
                        break;
                    }
                case "2":
                    {
                        //Si el nivel de usuario es 2 significa que es un usuario de control de unidades (Luces, A/C).
                        String detail = "Acceso de control de unidades autorizado";
                        Conexion.okAccessLog(userId, date.toString(), time.toString(), detail);
                        ventanaAdmin.setVisible(true);
                        this.dispose();
                        break;
                    }
                case "3":
                    {
                        //Si el nivel de usuario es 3 significa que es un simple mortal que solo quiere llorar. :)
                        String detail = "Acceso de usuario mortal autorizado";
                        Conexion.okAccessLog(userId, date.toString(), time.toString(), detail);
                        ventanaAdmin.setVisible(true);
                        this.dispose();
                        break;
                    }
                default:
                    break;
            }
    }else{  //Si no se valida el usuario, este genera un registro en la tabla de failaccesslog con el userId inexistente.
            String detail = "usuario o contraseña incorrecta"; //En esta parte no abre ninguna ventana solo muestra un mensaje de error. 
            Conexion.accessLogFail(userId, date.toString(), time.toString(), detail);
            JOptionPane.showMessageDialog(null, detail);
        }
    }//GEN-LAST:event_btnAceptarActionPerformed

    private void btnEdoServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEdoServerActionPerformed
          if(Conexion.cone != null){
            lblEdoServer.setText("Conectado");
            lblEdoServer.setForeground(Color.GREEN);
        }else{
            lblEdoServer.setText("Desconectado");
            lblEdoServer.setForeground(Color.red);
          }
    }//GEN-LAST:event_btnEdoServerActionPerformed

    private void btnAceptarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnAceptarKeyPressed
      if(evt.getKeyCode() == KeyEvent.VK_ENTER){
        String user = txtUsuario.getText();
        String pass = txtPass.getText();
        AdminVen ventanaAdmin = new AdminVen();
        SecFrameLamp ventanaLamp = new SecFrameLamp();
        String userId =  Conexion.getUserId(user); // El metodo devuelve el id de usuario en String y lo pone en la variable userId
        String accessLevel = Conexion.getAccesslevel(user);
      if(userId.contentEquals("")){ //Si el Id de usuario no devuelve ningun valor se le asigna un 0 a userId, que en la base de datos es un usuario NULL.
          userId = "0";
      } 
 
    if(Conexion.cone == null){ //Si no existe la conexion llama al metodo crear que hace la conexion.
            try {
                Conexion.crear();
            } catch (SQLException ex) {
                Logger.getLogger(LogIn.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(LogIn.class.getName()).log(Level.SEVERE, null, ex);
            }
    }
    
    if(Conexion.validarUser(user, pass)== 1){   //El metodo validar devuelve un 1 si el usuario existe en la base de datos Si no, pues no existe.
            switch (accessLevel) {
                case "0":
                    {
                        //Si el nivel de usuario es 0 el usuario es un Administrador o un desarrollador.
                        String detail = "Acceso administrativo/Dev"; //El detalle que ira en el campo detail de la tabla bitacora OkAccessLog
                        Conexion.okAccessLog(userId, date.toString(), time.toString(), detail); //Llama al metodo okAccessLog que inserta en la bitacora los detalles de el usuario. 
                        ventanaAdmin.setVisible(true); //Muestra la ventana de administrador. 
                        this.dispose(); //Cierra esta ventana
                        break;
                    }
                case "1":
                    {
                        // Si el nivel de usuario es 1 significa que es un usuario de control de horarios.
                        String detail = "Acceso de control de horas autorizado";
                        Conexion.okAccessLog(userId, date.toString(), time.toString(), detail);
                        ventanaAdmin.setVisible(true);
                        this.dispose();
                        break;
                    }
                case "2":
                    {
                        //Si el nivel de usuario es 2 significa que es un usuario de control de unidades (Luces, A/C).
                        String detail = "Acceso de control de unidades autorizado";
                        Conexion.okAccessLog(userId, date.toString(), time.toString(), detail);
                        ventanaAdmin.setVisible(true);
                        this.dispose();
                        break;
                    }
                case "3":
                    {
                        //Si el nivel de usuario es 3 significa que es un simple mortal que solo quiere llorar. :)
                        String detail = "Acceso de usuario mortal autorizado";
                        Conexion.okAccessLog(userId, date.toString(), time.toString(), detail);
                        ventanaAdmin.setVisible(true);
                        this.dispose();
                        break;
                    }
                default:
                    break;
            }
    }else{  //Si no se valida el usuario, este genera un registro en la tabla de failaccesslog con el userId inexistente.
            String detail = "usuario o contraseña incorrecta"; //En esta parte no abre ninguna ventana solo muestra un mensaje de error. 
            Conexion.accessLogFail(userId, date.toString(), time.toString(), detail);
            JOptionPane.showMessageDialog(null, detail);
        }
      }  
    }//GEN-LAST:event_btnAceptarKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LogIn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LogIn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LogIn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LogIn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LogIn().setVisible(true);
            }
        });
        try {
            Conexion.crear();
        } catch (SQLException ex) {
            Logger.getLogger(AdminVen.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(AdminVen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAceptar;
    private javax.swing.JButton btnEdoServer;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel lblEdoServer;
    public static javax.swing.JPasswordField txtPass;
    public static javax.swing.JTextField txtUsuario;
    // End of variables declaration//GEN-END:variables
}
